{"version":3,"sources":["Req.js"],"names":[],"mappings":";;;;;;;;;;IAAqB,GAAG;AACX,WADQ,GAAG,GAC4D;qEAAJ,EAAE;;4BAAnE,OAAO;QAAP,OAAO,gCAAG,EAAE;sCAAE,iBAAiB;QAAjB,iBAAiB,0CAAG,EAAE;uCAAE,kBAAkB;QAAlB,kBAAkB,2CAAG,EAAE;;0BADvD,GAAG;;AAEpB,QAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,QAAI,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;AAC/B,QAAI,CAAC,OAAO,CAAC,IAAI,GAAG,MAAM,CAAC;;AAE3B,QAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;AAC3C,QAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;;AAE7C,UAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;GAC7B;;eAVkB,GAAG;;WAYlB,gBAA2B;;;wEAAJ,EAAE;;UAAvB,MAAM,SAAN,MAAM;UAAE,GAAG,SAAH,GAAG;UAAE,IAAI,SAAJ,IAAI;;AACrB,UAAI,OAAO,GAAG,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAC,CAAC;;AAEvF,UAAI,IAAI,EAAE,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;;AAE9B,UAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,UAAC,CAAC,EAAK;AACpC,SAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;OACjB,CAAC,CAAC;;AAEH,aAAO,KAAK,CAAC,IAAI,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ,EAAK;AACzD,eAAO,MAAK,kBAAkB,CAAC,MAAM,CAAC,UAAC,QAAQ,EAAE,cAAc,EAAK;AAClE,iBAAO,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SACtC,EAAE,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;OAC/B,CAAC,CAAC;KACJ;;;WAEE,aAAC,GAAG,EAAE;AACP,aAAO,IAAI,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,KAAK,EAAE,GAAG,EAAH,GAAG,EAAC,CAAC,CAAC;KACxC;;;WAEK,iBAAC,GAAG,EAAE;AACV,aAAO,IAAI,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAH,GAAG,EAAC,CAAC,CAAC;KAC3C;;;WAEG,cAAC,GAAG,EAAE,IAAI,EAAE;AACd,aAAO,IAAI,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,MAAM,EAAE,GAAG,EAAH,GAAG,EAAE,IAAI,EAAJ,IAAI,EAAC,CAAC,CAAC;KAC/C;;;WAEE,aAAC,GAAG,EAAE,IAAI,EAAE;AACb,aAAO,IAAI,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,KAAK,EAAE,GAAG,EAAH,GAAG,EAAE,IAAI,EAAJ,IAAI,EAAC,CAAC,CAAC;KAC9C;;;WAEI,eAAC,GAAG,EAAE,IAAI,EAAE;AACf,aAAO,IAAI,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,OAAO,EAAE,GAAG,EAAH,GAAG,EAAE,IAAI,EAAJ,IAAI,EAAC,CAAC,CAAC;KAChD;;;SA9CkB,GAAG;;;qBAAH,GAAG","file":"Req-compiled.js","sourcesContent":["export default class Req {\r\n  constructor({headers = {}, requestProcessors = [], responseProcessors = []} = {}) {\r\n    this.options = {};\r\n    this.options.headers = headers;\r\n    this.options.mode = \"cors\";\r\n\r\n    this.requestProcessors = requestProcessors;\r\n    this.responseProcessors = responseProcessors;\r\n\r\n    Object.freeze(this.options);\r\n  }\r\n\r\n  send({method, url, body} = {}) {\r\n    var options = {headers: this.options.headers, mode: this.options.mode, method: method};\r\n\r\n    if (body) options.body = body;\r\n\r\n    this.requestProcessors.forEach((f) => {\r\n      f.call(options);\r\n    });\r\n\r\n    return fetch(new Request(url, options)).then((response) => {\r\n      return this.responseProcessors.reduce((response, postProcessors) => {\r\n        return response.then(postProcessors);\r\n      }, Promise.resolve(response));\r\n    });\r\n  }\r\n\r\n  get(url) {\r\n    return this.send({method: \"GET\", url});\r\n  }\r\n\r\n  delete(url) {\r\n    return this.send({method: \"DELETE\", url});\r\n  }\r\n\r\n  post(url, body) {\r\n    return this.send({method: \"POST\", url, body});\r\n  }\r\n\r\n  put(url, body) {\r\n    return this.send({method: \"PUT\", url, body});\r\n  }\r\n\r\n  patch(url, body) {\r\n    return this.send({method: \"PATCH\", url, body});\r\n  }\r\n}"]}